@use 'sass:math';
@import 'mixins';
@import 'variables';

$dark-text-color: #686868;
$light-text-color: #fff;
$first-animation-length: 0.3s;

.sites {
  list-style: none;
  width: 100%;
  display: flex;
  justify-content: center;
  align-items: center;
  z-index: 1;
  @include mobile {
    flex-direction: column;
    margin-top: 150px;
    margin-bottom: 100px;
  }

  .site {
    position: relative;
    width: 200px;
    height: 200px;
    margin: 0 10px;
    border-radius: 50%;

    display: flex;
    justify-content: center;
    align-items: center;
    flex-shrink: 0;

    transition: 0.7s filter ease $first-animation-length, $first-animation-length transform ease 0s;
    will-change: filter, transform;
    h2 {
      // Put heading above everything else
      z-index: 1;
      button {
        @include reset-button;
        position: relative;
        transform-style: preserve-3d;
        // perspective: 300px;
        img,
        .title {
          cursor: pointer;
        }
        .badge {
          z-index: 2;
        }
      }
    }
    &.isExpanded {
      filter: drop-shadow(0 3px 4px rgba(255, 255, 255, 0.7));
      .cardBox .cardBackground {
        transform: scale(6);
      }
      .avatar {
        transform: translateY(-50%) scale(0.4);
        filter: grayscale(0);
      }
      .badge {
        opacity: 0;
      }
      .title {
        cursor: auto;
        opacity: 0;
        transform: translateY(-4px) scale(0.8);
      }
      p {
        z-index: 2; // now bring it in front for link to be clickable
        opacity: 1;
        // Add the delay only for pressed (fade-in) instead of both directions:
        transition-delay: $first-animation-length;
        .innerLink {
          pointer-events: auto;
        }
      }
    }
    .cardBox {
      @include abs-centered;
      border-radius: 3px;
      // heptagon: clip-path: polygon(50% 0%, 83% 12%, 100% 43%, 94% 78%, 68% 100%, 32% 100%, 6% 78%, 0% 43%, 17% 12%);
      // pentagon: clip-path polygon: clip-path: polygon(50% 0%, 100% 38%, 82% 100%, 18% 100%, 0% 38%);
      clip-path: polygon(20% 0%, 80% 0%, 100% 20%, 100% 80%, 80% 100%, 20% 100%, 0% 80%, 0% 20%);
      overflow: hidden;

      .cardBackground {
        width: 50px;
        height: 50px;
        border-radius: 50%;
        border: 1px solid rgba(225, 227, 232, 0.18);
        // box-shadow: 0 3px 4px 0 rgba(44, 71, 146, 0.25);
        background-color: #fff;
        transition: all 0.6s ease;
        will-change: transform;
      }
    }

    .avatar {
      display: block;
      width: 100%;
      height: 100%;
      border-radius: 50%;
      border: 2px solid rgba(255, 255, 255, 0.5);
      filter: saturate(0.8);
      transition: transform 0.4s ease;
      will-change: transform, filter, box-shadow;
      backface-visibility: hidden;
      &.avatarBackSide {
        position: absolute;
        left: 0;
        right: 0;
        top: 0;
        bottom: 0;
        transform: rotateX(180deg);
      }
    }
    .title {
      display: block;
      text-align: center;
      position: absolute;
      left: 0;
      right: 0;
      bottom: -30px;
      color: $light-text-color;
      font-weight: normal;
      font-size: 18px;
      transition: opacity $first-animation-length ease, transform $first-animation-length ease;
    }
    p {
      position: absolute;
      left: 0;
      right: 0;
      top: 0;
      bottom: 0;
      text-align: center;
      display: flex;
      flex-direction: column;
      justify-content: center;
      opacity: 0;
      transition: all 0.25s ease-in;
      color: $dark-text-color;

      .innerLink {
        display: block;
        pointer-events: none;
        margin: 8px 0;
        color: $app-color;
        text-decoration: underline dotted;
        &:hover,
        &:focus {
          color: lighten($app-color, 10%);
          text-decoration: underline solid;
        }
      }
    }
    &.career {
      order: 2;
      transform: translateY(-100px);
      @include mobile {
        order: unset;
        transform: unset;
      }
    }
    &.university,
    &.photography {
      transform: scale(0.5) translateY(50px);
      .title {
        bottom: -50px;
        transform: scale(2);
      }
      &.isExpanded {
        transform: scale(1) translateY(50px);
        .title {
          transform: translateY(-4px) scale(0.3);
        }
        .avatar {
          transform: translateY(-50%) scale(0.4);
          filter: grayscale(0);
          &.avatarFrontSide {
            transform: translateY(-50%) rotateX(180deg) scale(0.4);
          }
          &.avatarBackSide {
            transform: translateY(-50%) rotateX(0deg) scale(0.4);
          }
        }
      }
    }
    &.university {
      order: 1;
      @include mobile {
        order: unset;
      }
    }
    &.photography {
      order: 3;
      @include mobile {
        order: unset;
      }
    }
    &.otherSiteSelected {
      //transform: scale(0.5) translate(50px);
      //transform-origin: bottom center;
      // also delete the transition defined for this element
      opacity: 0.5;
    }

    // Mouse and focus only. Will have no effect on mobile.
    button:hover,
    button:focus {
      &[aria-expanded='false'] {
        .avatar {
          box-shadow: 1px 3px 10px rgba(255, 255, 255, 0.3);
          border: 2px solid rgba(255, 255, 255, 1);
          filter: grayscale(0);
        }
        .title {
          text-shadow: 1px 1px 5px rgba(255, 255, 255, 0.3);
          text-decoration: underline 1px solid;
        }
      }
    }

    /// the little attached badges (images)
    $add-size: 20%;
    $adds-fit: math.div(100%, $add-size * 2);
    .badge {
      //z-index: 2;
      position: absolute;
      width: $add-size;
      height: $add-size;
      left: 0;
      right: 0;
      top: 0;
      bottom: 0;
      margin: auto;
      // top: 50% - math.sin(-45deg) * 50%;
      // left: 50% + math.cos(-45deg) * 50%;
      // transform: translate(-50%, -50%);
      border-radius: 50%;
      border: 1px solid rgba(255, 255, 255, 0.5);
      transition: opacity $first-animation-length ease;
      opacity: 1;
      @for $i from 1 through 4 {
        &:nth-child(#{$i}) {
          $angle: 0deg - (15deg * $i);
          transform: translate(math.cos($angle) * 100% * $adds-fit, math.sin(-$angle) * 100% * $adds-fit);
        }
      }
    }
    &:not(.isExpanded) .badge {
      transition-delay: $first-animation-length; // only applied on fade back in
    }
  }
}
