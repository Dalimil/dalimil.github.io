@use 'sass:math';
@import 'mixins';

$dark-text-color: #686868;
$light-text-color: #fff;
$link-color: #4c8bf5;

@mixin abs-centered {
  position: absolute;
  top: 0;
  bottom: 0;
  left: 0;
  right: 0;
  display: flex;
  justify-content: center;
  align-items: center;
}

@keyframes spin {
  100% {
    transform: rotate(-360deg);
  }
}

.root {
  position: relative;
  background: linear-gradient(135deg, #e2a9e5 15%, #2b94e5 100%);
  min-height: 100vh;
  display: flex;
  justify-content: center;
  align-items: center;
  overflow: hidden;

  // Mouse cursor shine effect
  &::after {
    pointer-events: none; // to allow click through
    content: '';
    width: 250vw;
    height: 250vh;
    position: absolute;
    top: var(--y);
    left: var(--x);
    transform: translate(-50%, -50%);
    opacity: 0;
    background: radial-gradient(circle closest-side, rgba(255, 255, 255, 0.3), transparent);
    transition: opacity 0.5s ease-out;
  }
  &:hover::after {
    opacity: 1;
  }

  .sites {
    list-style: none;
    width: 100%;
    display: flex;
    justify-content: center;
    align-items: center;
    z-index: 1;

    $first-animation-length: 0.3s;
    .site {
      @include reset-button;
      cursor: pointer;
      position: relative;
      width: 200px;
      height: 200px;
      margin: 0 10px;
      border-radius: 50%;

      display: flex;
      justify-content: center;
      align-items: center;
      flex-shrink: 0;

      transition: filter ease 0.7s;
      transition-delay: $first-animation-length;
      &[aria-pressed='true'] {
        filter: drop-shadow(0 3px 4px rgba(255, 255, 255, 0.9));
        .cardBox .cardBackground {
          transform: scale(6);
        }
        img {
          transform: translateY(-50%) scale(0.5);
        }
        h2 {
          opacity: 0;
          transform: translateY(-4px) scale(0.8);
        }
        p {
          opacity: 1;
          // Add the delay only for pressed (fade-in) instead of both directions:
          transition-delay: $first-animation-length;
          .innerLink {
            pointer-events: auto;
          }
        }
        .sprites {
          // little dots that fly out in a circle
          $circle-size: 1500%;
          $dot-count: 30; // should match the element count rendered (can't use css vars here)
          $step: math.div(360deg, $dot-count);
          @for $i from 1 through $dot-count {
            $angle: $i * $step;
            $translated-position: translate(math.cos($angle) * $circle-size, math.sin($angle) * $circle-size);

            .sprite:nth-child(#{$i}) {
              opacity: 1;
              background-color: scale-color(
                $link-color,
                $lightness: math.min(100%, math.max(0%, 50% - math.cos($angle * 2) * 50%))
              );
              // Transform - to spread out the initial dots in a circle
              transform: $translated-position;
              // Animation - to keep them going back and forth later (with randomly delayed-start)
              animation: fluidity#{$i} 4s ease alternate infinite #{1000 + math.random(16000)}ms;
              // row rollout: transition-delay: 20ms * $i;
              transition-delay: 20ms * $i * math.log(math.tan($angle));
            }
            // Alternative would be getting rid of fluidity and just speed up and slow down the rotation
            // animation alone (using animation spin keyframes unevenly spaced out).
            @keyframes fluidity#{$i} {
              // To insert spaces in between the infinite animation iterations, we need to space-out
              // the keyframes themselves. E.g. 0-75% out, 10% for transition itself, and 15% time inside.
              0% {
                transform: $translated-position;
              }
              30% {
                transform: $translated-position;
              }
              50% {
                $fly-away-factor: 1.3;
                // Same formula, just bigger multiplier
                transform: translate(
                  math.cos($angle) * $circle-size * $fly-away-factor,
                  math.sin($angle) * $circle-size * $fly-away-factor
                );
              }
              70% {
                transform: $translated-position;
              }
              100% {
                transform: $translated-position;
              }
            }
          }
          animation: spin 24s linear infinite;
        }
      }
      .cardBox {
        @include abs-centered;
        border-radius: 3px;
        // heptagon: clip-path: polygon(50% 0%, 83% 12%, 100% 43%, 94% 78%, 68% 100%, 32% 100%, 6% 78%, 0% 43%, 17% 12%);
        // pentagon: clip-path polygon: clip-path: polygon(50% 0%, 100% 38%, 82% 100%, 18% 100%, 0% 38%);
        clip-path: polygon(20% 0%, 80% 0%, 100% 20%, 100% 80%, 80% 100%, 20% 100%, 0% 80%, 0% 20%);
        overflow: hidden;

        .cardBackground {
          width: 50px;
          height: 50px;
          border-radius: 50%;
          border: 1px solid rgba(225, 227, 232, 0.18);
          box-shadow: 0 3px 4px 0 rgba(44, 71, 146, 0.25);
          background-color: #fff;
          transition: all 0.4s ease;
          will-change: transform;
        }
      }
      .sprites {
        @include abs-centered;
        .sprite {
          width: 6%;
          height: 6%;
          border-radius: 50%;
          transition: all 0.4s ease;
          will-change: transform, transition-delay, opacity, background-color;
          position: absolute;
          opacity: 0;
        }
      }
      img {
        display: block;
        width: 100%;
        height: 100%;
        border-radius: 50%;
        opacity: 0.3;
        transition: all $first-animation-length ease;
        will-change: transform;
      }
      h2 {
        display: block;
        text-align: center;
        position: absolute;
        bottom: -30px;
        color: $light-text-color;
        font-weight: normal;
        font-size: 18px;
        transition: all 0.4s ease;
      }
      p {
        position: absolute;
        left: 0;
        right: 0;
        text-align: center;
        top: 34%;
        opacity: 0;
        transition: all 0.25s ease-in;
        color: $dark-text-color;

        .innerLink {
          pointer-events: none;
          margin: 8px 0;
          color: $link-color;
          text-decoration: none;
          &:hover,
          &:focus {
            color: lighten($link-color, 10%);
            text-decoration: underline dotted;
          }
        }
      }
      &.career {
        order: 2;
        transform: translateY(-50px);
      }
      &.university {
        order: 3;
        width: 100px;
        height: 100px;
        transform: translateY(50px);
      }
      &.photography {
        order: 1;
        width: 100px;
        height: 100px;
        transform: translateY(50px);
      }

      // Mouse and focus only. Will have no effect on mobile.
      &:hover,
      &:focus {
        &:not(.pressed) {
          box-shadow: 0 0 15px rgba(255, 255, 255, 0.5);
        }
      }

      /// the little add things, maybe just attach them as badges
      .add {
        position: absolute;
        top: 0px;
        right: 0px;
        width: 50px;
        height: 50px;
        background: red;
        transition: all 2s cubic-bezier(0.21, 1, 0.84, 1.01);
      }
      // &[aria-pressed='true'] {
      //   .add {
      //     transform: translate(80px, 35px) scale(1.2);
      //   }
      // }
      ////////////
    }
  }
}
